locals {
  azs          = data.aws_availability_zones.available.names
  selected_azs = slice(local.azs, 0, var.azs_per_vpc)

  # ─────────────────────────────────────────────────────────
  # AZ-Backed Core Public Subnets
  # ─────────────────────────────────────────────────────────
  core_public_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for az_idx in range(length(local.selected_azs)) : [
        for idx in range(cfg.core.subnets_per_az.public_subnets) : {
          key           = format("%s-core-az%d-pub-%d", env, az_idx + 1, idx + 1)
          vpc_id        = aws_vpc.core[env].id
          cidr_block    = cidrsubnet(cfg.core.primary, 8, az_idx * cfg.core.subnets_per_az.public_subnets + idx)
          az            = local.selected_azs[az_idx]
          map_public_ip = true
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # AZ-Backed Core Private Subnets
  # ─────────────────────────────────────────────────────────
  core_private_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for az_idx in range(length(local.selected_azs)) : [
        for idx in range(cfg.core.subnets_per_az.private_subnets) : {
          key           = format("%s-core-az%d-priv-%d", env, az_idx + 1, idx + 1)
          vpc_id        = aws_vpc.core[env].id
          cidr_block    = cidrsubnet(cfg.core.secondary, 8, az_idx * cfg.core.subnets_per_az.private_subnets + idx)
          az            = local.selected_azs[az_idx]
          map_public_ip = false
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # AZ-Backed Edge Public Subnets
  # ─────────────────────────────────────────────────────────
  edge_public_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for az_idx in range(length(local.selected_azs)) : [
        for idx in range(cfg.edge.subnets_per_az.public_subnets) : {
          key           = format("%s-edge-az%d-pub-%d", env, az_idx + 1, idx + 1)
          vpc_id        = aws_vpc.edge[env].id
          cidr_block    = cidrsubnet(cfg.edge.primary, 8, az_idx * cfg.edge.subnets_per_az.public_subnets + idx)
          az            = local.selected_azs[az_idx]
          map_public_ip = true
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # AZ-Backed Edge Private Subnets
  # ─────────────────────────────────────────────────────────
  edge_private_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for az_idx in range(length(local.selected_azs)) : [
        for idx in range(cfg.edge.subnets_per_az.private_subnets) : {
          key           = format("%s-edge-az%d-priv-%d", env, az_idx + 1, idx + 1)
          vpc_id        = aws_vpc.edge[env].id
          cidr_block    = cidrsubnet(cfg.edge.secondary, 8, az_idx * cfg.edge.subnets_per_az.private_subnets + idx)
          az            = local.selected_azs[az_idx]
          map_public_ip = false
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # LZ-Backed Core Public Subnets
  # ─────────────────────────────────────────────────────────
  core_lz_public_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for lz_idx, lz in var.local_zones : [
        for idx in range(var.subnets_per_local_zone.public_subnets) : {
          key    = format("%s-core-lz-%s-pub-%d", env, lz, idx + 1)
          vpc_id = aws_vpc.core[env].id
          cidr_block = cidrsubnet(
            cfg.core.primary,
            16,
            100 + lz_idx * var.subnets_per_local_zone.public_subnets + idx
          )
          az            = lz
          map_public_ip = true
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # LZ-Backed Core Private Subnets
  # ─────────────────────────────────────────────────────────
  core_lz_private_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for lz_idx, lz in var.local_zones : [
        for idx in range(var.subnets_per_local_zone.private_subnets) : {
          key    = format("%s-core-lz-%s-priv-%d", env, lz, idx + 1)
          vpc_id = aws_vpc.core[env].id
          cidr_block = cidrsubnet(
            cfg.core.secondary,
            16,
            300 + lz_idx * var.subnets_per_local_zone.private_subnets + idx
          )
          az            = lz
          map_public_ip = false
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # LZ-Backed Edge Public Subnets
  # ─────────────────────────────────────────────────────────
  edge_lz_public_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for lz_idx, lz in var.local_zones : [
        for idx in range(var.subnets_per_local_zone.public_subnets) : {
          key    = format("%s-edge-lz-%s-pub-%d", env, lz, idx + 1)
          vpc_id = aws_vpc.edge[env].id
          cidr_block = cidrsubnet(
            cfg.edge.primary,
            16,
            200 + lz_idx * var.subnets_per_local_zone.public_subnets + idx
          )
          az            = lz
          map_public_ip = true
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # LZ-Backed Edge Private Subnets
  # ─────────────────────────────────────────────────────────
  edge_lz_private_defs = flatten([
    for env, cfg in var.vpc_configs : [
      for lz_idx, lz in var.local_zones : [
        for idx in range(var.subnets_per_local_zone.private_subnets) : {
          key    = format("%s-edge-lz-%s-priv-%d", env, lz, idx + 1)
          vpc_id = aws_vpc.edge[env].id
          cidr_block = cidrsubnet(
            cfg.edge.secondary,
            16,
            400 + lz_idx * var.subnets_per_local_zone.private_subnets + idx
          )
          az            = lz
          map_public_ip = false
        }
      ]
    ]
  ])

  # ─────────────────────────────────────────────────────────
  # Turn each list into a map for for_each
  # ─────────────────────────────────────────────────────────
  core_public_map     = { for d in local.core_public_defs : d.key => d }
  core_private_map    = { for d in local.core_private_defs : d.key => d }
  edge_public_map     = { for d in local.edge_public_defs : d.key => d }
  edge_private_map    = { for d in local.edge_private_defs : d.key => d }
  core_lz_public_map  = { for d in local.core_lz_public_defs : d.key => d }
  core_lz_private_map = { for d in local.core_lz_private_defs : d.key => d }
  edge_lz_public_map  = { for d in local.edge_lz_public_defs : d.key => d }
  edge_lz_private_map = { for d in local.edge_lz_private_defs : d.key => d }

  # ─────────────────────────────────────────────────────────
  # Turn each list into a map for for_each
  # ─────────────────────────────────────────────────────────
  edge_pub_vpcs = {
    for vpc, cfg in var.vpc_configs :
    vpc => cfg.edge
    if cfg.edge.subnets_per_az.public_subnets > 0 && cfg.edge.attach_igw
  }

  edge_priv_vpcs = {
    for vpc, cfg in var.vpc_configs :
    vpc => cfg.edge
    if cfg.edge.subnets_per_az.private_subnets > 0
  }

  core_pub_vpcs = {
    for vpc, cfg in var.vpc_configs :
    vpc => cfg.core
    if cfg.core.subnets_per_az.public_subnets > 0 && cfg.core.attach_igw
  }

  core_priv_vpcs = {
    for vpc, cfg in var.vpc_configs :
    vpc => cfg.core
    if cfg.core.subnets_per_az.private_subnets > 0
  }
}